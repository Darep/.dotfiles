# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}"
	local ip=$(ipconfig getifaddr en1)
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}"
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
	encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript
	else # pipe
		python -mjson.tool | pygmentize -l javascript
	fi
}

function defaultjdk {
    local vmdir=/System/Library/Frameworks/JavaVM.framework/Versions
    local ver=${1?Usage: defaultjdk <version>}

    [ -z "$2" ] || error="Too many arguments"
    [ -d $vmdir/$ver ] || error="Unknown JDK version: $ver"
    [ "$(readlink $vmdir/CurrentJDK)" != "$ver" ] || error="JDK already set to $ver"


    if [ -n "$error" ]; then
    echo $error
    return 1
    fi

    echo -n "Setting default JDK & HotSpot to $ver ... "

    if [ "$(/usr/bin/id -u)" != "0" ]; then
    SUDO=sudo
    fi

    $SUDO /bin/rm /System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK
    $SUDO /bin/ln -s $ver /System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK

    echo Done.
}

function setjdk {
    local vmdir=/System/Library/Frameworks/JavaVM.framework/Versions
    local ver=${1?Usage: setjdk <version>}

    [ -d $vmdir/$ver ] || {
    echo Unknown JDK version: $ver
    return 1
    }

    echo -n "Setting this terminal's JDK to $ver ... "

    export JAVA_HOME=$vmdir/$ver/Home
    PATH=$(echo $PATH | tr ':' '\n' | grep -v $vmdir | tr '\n' ':')
    export PATH=$JAVA_HOME/bin:$PATH

    java -version
}

function _setjdk_completion (){
    COMPREPLY=()

    local vmdir=/System/Library/Frameworks/JavaVM.framework/Versions
    local cur=${COMP_WORDS[COMP_CWORD]//\\\\/}
    local options=$(cd $vmdir; ls | grep 1. | tr '\n' ' ')

    COMPREPLY=($(compgen -W "${options}" ${cur}))
}

complete -F _setjdk_completion -o filenames setjdk
complete -F _setjdk_completion -o filenames defaultjdk

function port-use() {
    sudo lsof -n -i4TCP:$*
}
